steps:
- id: 'buildImage'
  name: 'gcr.io/k8s-skaffold/skaffold:v1.35.1'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    skaffold build --file-output /workspace/tags.json
- name: 'gcr.io/cloud-builders/docker'
  id: 'Linting Dockerfile for Static Analysis'
  entrypoint: bash
  args:
    - '-c'
    - |
      docker run --rm -v $(pwd)/.hadolint.yaml:/.config/hadolint.yaml -i hadolint/hadolint hadolint -f json - < ./Dockerfile > /workspace/res.txt ; \
      if [[ $(cat res.txt | wc -c) -gt 2 ]] ; then echo 'Static Analysis failed' && cat res.txt && exit 1; else echo 'Linting passed'; fi
- id: 'container structural test'
  name: 'gcr.io/k8s-skaffold/skaffold:v1.35.1'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    skaffold test -a /workspace/tags.json
- id: 'scan source code'
  name: 'snyk/snyk-cli:maven-3.6.3'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "${_SNYK_TOKEN}"
      snyk config set api="${_SNYK_TOKEN}"
      snyk test --json > ${_SCA_RESULT_PATH} || true
      cat ${_SCA_RESULT_PATH}
  # secretEnv:
  #   - 'SNYK_TOKEN'
- id: 'scan image cve'
  name: gcr.io/google.com/cloudsdktool/cloud-sdk
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud artifacts docker images scan ${_IMAGE_PATH}:latest \
    --format='value(response.scan)' --remote > /workspace/scan_id.txt

- id: 'Check code & cve & sign image'
  name: 'gcr.io/shawn-demo-2022/cosign:latest'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ImageDigest="$(gcloud container images list-tags --format='get(digest)' ${_IMAGE_PATH} | head -1)"
    ImageToAttest="${_IMAGE_PATH}@${ImageDigest}"
    echo "ImageToAttest: ${ImageToAttest}"
    export COSIGN_PASSWORD=${_COSIGN_PASSWORD}
    echo "Sign for Static Code Analysis"
    count=$(cat ${_SCA_RESULT_PATH} | jq '.vulnerabilities[] | select((.severity == "critical") or (.severity == "high"))' | jq '.identifiers.CVE[0]' | sort | uniq -c | wc -l | awk '{print $1}')
    echo "SCA Count: $count"
    if [ $count = 0 ]; then
      gsutil cp gs://shawn-demo-2022/keys/cosign-1.key ./cosign.key
      gsutil cp gs://shawn-demo-2022/attestations/sca.template ./sca.template
      echo "Signing for Static Code Analysis"
      cosign attest --key ./cosign.key --predicate ./sca.template ${ImageToAttest}
    else
      echo "source code check failed" && exit 1
    fi

    echo "Check Image CVE"
    gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt) \
    --format='value(vulnerability.effectiveSeverity, vulnerability.shortDescription)' > result.txt
    cat result.txt
    if (cat result.txt | grep -Fxq $_SEVERITY | grep -vFxq $_NEGLECT_CVE); then
      echo 'Failed vulnerability check' && exit 1
    else
      gsutil cp gs://shawn-demo-2022/keys/cosign-2.key ./cosign.key
      gsutil cp gs://shawn-demo-2022/attestations/cve.template ./cve.template
      echo "Signing for CVE Analysis"
      cosign attest --key ./cosign.key --predicate ./cve.template ${ImageToAttest}
    fi
- id: 'YAML complies to OPA gatekeeper'
  name: 'gcr.io/shawn-demo-2022/gator:latest'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    ImageDigest="$(gcloud container images list-tags --format='get(digest)' ${_IMAGE_PATH} | head -1)"
    ImageToAttest="${_IMAGE_PATH}@${ImageDigest}"
    export COSIGN_PASSWORD=${_COSIGN_PASSWORD}
    kustomize build kubernetes-manifests/uat > /workspace/uat-manifest.yaml
    result=$(gator test -f /workspace/uat-manifest.yaml -f gator-rules 2>&1)
    if [ -z $result ]; then
      gsutil cp gs://shawn-demo-2022/keys/cosign-3.key ./cosign.key
      gsutil cp gs://shawn-demo-2022/attestations/gator.template ./gator.template
      echo "Signing for Gator"
      cosign attest --key ./cosign.key --predicate ./gator.template ${ImageToAttest}
    else
      exit 1
    fi
- id: 'provide SBOM'
  name: 'spdx/spdx-sbom-generator'
  entrypoint: sh
  args:
  - '-c'
  - |
    /spdx-sbom-generator -p . -o workspace/
- id: 'trigger cloud deploy'
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: sh
  args:
  - '-c'
  - |
    if [ -f tags.json ]; then
      gcloud beta deploy releases create rev-${SHORT_SHA} \
      --delivery-pipeline=${_PIPELINE} \
      --labels=version=${SHORT_SHA} \
      --region ${_LOCATION} \
      --build-artifacts tags.json
    else 
      echo "tags.json does not exist"
    fi
  waitFor:
    - 'YAML complies to OPA gatekeeper'
substitutions:
  _IMAGE_PATH: asia-east1-docker.pkg.dev/shawn-demo-2022/image-repos/hello-world-java-docker
  _COSIGN_PASSWORD: 'VMware1!'
  _SCA_RESULT_PATH: /workspace/sca-result.json
  _CVE_RESULT_PATH: /workspace/cve-result.json
  _SEVERITY: CRITICAL
  _NEGLECT_CVE: CVE-2022-1292
  _PIPELINE: hello-java
  _LOCATION: asia-east1
timeout: 900s
# availableSecrets:
#   secretManager:
#   - versionName: projects/715534540884/secrets/snyk-token/versions/1
#     env: 'SNYK_TOKEN'