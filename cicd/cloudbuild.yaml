steps:
- id: 'buildImage'
  name: 'gcr.io/k8s-skaffold/skaffold:v1.35.1'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    skaffold build --file-output /workspace/tags.json
- id: 'container structural test'
  name: 'gcr.io/k8s-skaffold/skaffold:v1.35.1'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    skaffold test -a /workspace/tags.json
- id: 'scan source code & cve & sign image'
  name: 'gcr.io/shawn-demo-2022/snyk:latest'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ImageDigest="$(gcloud container images list-tags --format='get(digest)' ${_IMAGE_PATH} | head -1)"
    ImageToAttest="${_IMAGE_PATH}@${ImageDigest}"
    echo "ImageToAttest: ${ImageToAttest}"
    export COSIGN_PASSWORD=${_COSIGN_PASSWORD}
    snyk auth $$SNYK_TOKEN
    echo "Test & Sign for Static Code Analysis"
    snyk test . --json > ${_SCA_RESULT_PATH}
    cat ${_SCA_RESULT_PATH} 
    count=$(cat ${_SCA_RESULT_PATH} | jq '.vulnerabilities[] | select((.severity == "critical") or (.severity == "high"))' | jq '.identifiers.CVE[0]' | sort | uniq -c | wc -l | awk '{print $1}')
    echo "SCA Count: $count"
    if [ $count = 0 ]; then
      gsutil cp gs://shawn-demo-2022/keys/cosign-1.key ./cosign.key
      gsutil cp gs://shawn-demo-2022/attestations/sca.template ./sca.template
      echo "Signing for Static Code Analysis"
      cosign attest --key ./cosign.key --predicate ./sca.template ${ImageToAttest}
    else
      gcloud builds cancel $BUILD_ID > /dev/null || true
    fi

    echo "Test & Sign for Image CVE"
    snyk container test "${_IMAGE_PATH}:latest" --json > ${_CVE_RESULT_PATH}
    cat ${_CVE_RESULT_PATH}
    count=$(cat ${_CVE_RESULT_PATH} | jq '.vulnerabilities[] | select((.severity == "critical") or (.severity == "high"))' | jq '.identifiers.CVE[0]' | sort | uniq -c | wc -l | awk '{print $1}')
    echo "CVE Count: $count"
    if [ $count -lt 5 ]; then
      gsutil cp gs://shawn-demo-2022/keys/cosign-2.key ./cosign.key
      gsutil cp gs://shawn-demo-2022/attestations/cve.template ./cve.template
      echo "Signing for CVE"
      cosign attest --key ./cosign.key --predicate ./cve.template ${ImageToAttest}
    else
      gcloud builds cancel $BUILD_ID > /dev/null || true
    fi
  secretEnv:
    - SNYK_TOKEN
- id: 'YAML complies to OPA gatekeeper'
  name: 'gcr.io/shawn-demo-2022/gator:latest'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    ImageDigest="$(gcloud container images list-tags --format='get(digest)' ${_IMAGE_PATH} | head -1)"
    ImageToAttest="${_IMAGE_PATH}@${ImageDigest}"
    export COSIGN_PASSWORD=${_COSIGN_PASSWORD}
    result=$(gator test -f kubernetes-manifests/ -f gator-rules/)
    if [ -z $result ]; then
      gsutil cp gs://shawn-demo-2022/keys/cosign-3.key ./cosign.key
      gsutil cp gs://shawn-demo-2022/attestations/gator.template ./gator.template
      echo "Signing for Gator"
      cosign attest --key ./cosign.key --predicate ./gator.template ${ImageToAttest}
    else
      gcloud builds cancel $BUILD_ID > /dev/null || true
    fi
- id: 'deploy image'
  name: 'gcr.io/k8s-skaffold/skaffold:v1.35.1'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials ${_GKE_CLUSTER} --project ${_GKE_PROJECT} --zone ${_GKE_ZONE}
    skaffold deploy -a /workspace/tags.json
substitutions:
  _IMAGE_PATH: asia-east1-docker.pkg.dev/shawn-demo-2022/image-repos/hello-world-java-docker
  _COSIGN_PASSWORD: 'VMware1!'
  _SCA_RESULT_PATH: /workspace/sca-result.json
  _CVE_RESULT_PATH: /workspace/cve-result.json
  _GKE_CLUSTER: tsmc
  _GKE_ZONE: asia-east1-a
  _GKE_PROJECT: shawn-demo-2022
availableSecrets:
  secretManager:
  - versionName: projects/715534540884/secrets/snyk-token/versions/1
    env: 'SNYK_TOKEN'